// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto

#include "service.pb.h"
#include "service.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace gosun {
namespace video {

static const char* VideoProc_method_names[] = {
  "/gosun.video.VideoProc/TrailAndRec",
};

std::unique_ptr< VideoProc::Stub> VideoProc::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VideoProc::Stub> stub(new VideoProc::Stub(channel));
  return stub;
}

VideoProc::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_TrailAndRec_(VideoProc_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VideoProc::Stub::TrailAndRec(::grpc::ClientContext* context, const ::gosun::video::VideoTrailRecRequest& request, ::gosun::video::VideoTrailRecReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TrailAndRec_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gosun::video::VideoTrailRecReply>* VideoProc::Stub::AsyncTrailAndRecRaw(::grpc::ClientContext* context, const ::gosun::video::VideoTrailRecRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::gosun::video::VideoTrailRecReply>::Create(channel_.get(), cq, rpcmethod_TrailAndRec_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::gosun::video::VideoTrailRecReply>* VideoProc::Stub::PrepareAsyncTrailAndRecRaw(::grpc::ClientContext* context, const ::gosun::video::VideoTrailRecRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::gosun::video::VideoTrailRecReply>::Create(channel_.get(), cq, rpcmethod_TrailAndRec_, context, request, false);
}

VideoProc::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VideoProc_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VideoProc::Service, ::gosun::video::VideoTrailRecRequest, ::gosun::video::VideoTrailRecReply>(
          std::mem_fn(&VideoProc::Service::TrailAndRec), this)));
}

VideoProc::Service::~Service() {
}

::grpc::Status VideoProc::Service::TrailAndRec(::grpc::ServerContext* context, const ::gosun::video::VideoTrailRecRequest* request, ::gosun::video::VideoTrailRecReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gosun
}  // namespace video

