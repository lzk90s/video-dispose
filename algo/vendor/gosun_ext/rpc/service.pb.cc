// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace video {
namespace algo {
namespace gosun_ext {
class ImgRecognizeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImgRecognizeRequest> {
} _ImgRecognizeRequest_default_instance_;
class ImgRecognizeReplyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImgRecognizeReply> {
} _ImgRecognizeReply_default_instance_;

namespace protobuf_service_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgRecognizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgRecognizeRequest, imageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgRecognizeRequest, imagedata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgRecognizeRequest, pictureformat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgRecognizeRequest, calcparam_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgRecognizeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgRecognizeReply, data_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ImgRecognizeRequest)},
  { 8, -1, sizeof(ImgRecognizeReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImgRecognizeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImgRecognizeReply_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "service.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _ImgRecognizeRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ImgRecognizeReply_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ImgRecognizeRequest_default_instance_.DefaultConstruct();
  _ImgRecognizeReply_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rservice.proto\022\024video.algo.gosun_ext\"c\n"
      "\023ImgRecognizeRequest\022\017\n\007imageId\030\001 \001(\r\022\021\n"
      "\timageData\030\002 \001(\014\022\025\n\rpictureFormat\030\003 \001(\t\022"
      "\021\n\tcalcParam\030\004 \001(\t\"!\n\021ImgRecognizeReply\022"
      "\014\n\004data\030\001 \001(\t2s\n\016ImgProcService\022a\n\tRecog"
      "nize\022).video.algo.gosun_ext.ImgRecognize"
      "Request\032\'.video.algo.gosun_ext.ImgRecogn"
      "izeReply\"\000B\003\200\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 303);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_service_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImgRecognizeRequest::kImageIdFieldNumber;
const int ImgRecognizeRequest::kImageDataFieldNumber;
const int ImgRecognizeRequest::kPictureFormatFieldNumber;
const int ImgRecognizeRequest::kCalcParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImgRecognizeRequest::ImgRecognizeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:video.algo.gosun_ext.ImgRecognizeRequest)
}
ImgRecognizeRequest::ImgRecognizeRequest(const ImgRecognizeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imagedata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.imagedata().size() > 0) {
    imagedata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imagedata_);
  }
  pictureformat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pictureformat().size() > 0) {
    pictureformat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pictureformat_);
  }
  calcparam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.calcparam().size() > 0) {
    calcparam_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.calcparam_);
  }
  imageid_ = from.imageid_;
  // @@protoc_insertion_point(copy_constructor:video.algo.gosun_ext.ImgRecognizeRequest)
}

void ImgRecognizeRequest::SharedCtor() {
  imagedata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pictureformat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  calcparam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imageid_ = 0u;
  _cached_size_ = 0;
}

ImgRecognizeRequest::~ImgRecognizeRequest() {
  // @@protoc_insertion_point(destructor:video.algo.gosun_ext.ImgRecognizeRequest)
  SharedDtor();
}

void ImgRecognizeRequest::SharedDtor() {
  imagedata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pictureformat_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  calcparam_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImgRecognizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImgRecognizeRequest::descriptor() {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[0].descriptor;
}

const ImgRecognizeRequest& ImgRecognizeRequest::default_instance() {
  protobuf_service_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImgRecognizeRequest* ImgRecognizeRequest::New(::google::protobuf::Arena* arena) const {
  ImgRecognizeRequest* n = new ImgRecognizeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImgRecognizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:video.algo.gosun_ext.ImgRecognizeRequest)
  imagedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pictureformat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  calcparam_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imageid_ = 0u;
}

bool ImgRecognizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video.algo.gosun_ext.ImgRecognizeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 imageId = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes imageData = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagedata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pictureFormat = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pictureformat()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pictureformat().data(), this->pictureformat().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "video.algo.gosun_ext.ImgRecognizeRequest.pictureFormat"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string calcParam = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_calcparam()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->calcparam().data(), this->calcparam().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "video.algo.gosun_ext.ImgRecognizeRequest.calcParam"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video.algo.gosun_ext.ImgRecognizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video.algo.gosun_ext.ImgRecognizeRequest)
  return false;
#undef DO_
}

void ImgRecognizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video.algo.gosun_ext.ImgRecognizeRequest)
  // uint32 imageId = 1;
  if (this->imageid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->imageid(), output);
  }

  // bytes imageData = 2;
  if (this->imagedata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->imagedata(), output);
  }

  // string pictureFormat = 3;
  if (this->pictureformat().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pictureformat().data(), this->pictureformat().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "video.algo.gosun_ext.ImgRecognizeRequest.pictureFormat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pictureformat(), output);
  }

  // string calcParam = 4;
  if (this->calcparam().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->calcparam().data(), this->calcparam().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "video.algo.gosun_ext.ImgRecognizeRequest.calcParam");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->calcparam(), output);
  }

  // @@protoc_insertion_point(serialize_end:video.algo.gosun_ext.ImgRecognizeRequest)
}

::google::protobuf::uint8* ImgRecognizeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:video.algo.gosun_ext.ImgRecognizeRequest)
  // uint32 imageId = 1;
  if (this->imageid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->imageid(), target);
  }

  // bytes imageData = 2;
  if (this->imagedata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->imagedata(), target);
  }

  // string pictureFormat = 3;
  if (this->pictureformat().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pictureformat().data(), this->pictureformat().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "video.algo.gosun_ext.ImgRecognizeRequest.pictureFormat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pictureformat(), target);
  }

  // string calcParam = 4;
  if (this->calcparam().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->calcparam().data(), this->calcparam().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "video.algo.gosun_ext.ImgRecognizeRequest.calcParam");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->calcparam(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:video.algo.gosun_ext.ImgRecognizeRequest)
  return target;
}

size_t ImgRecognizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:video.algo.gosun_ext.ImgRecognizeRequest)
  size_t total_size = 0;

  // bytes imageData = 2;
  if (this->imagedata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->imagedata());
  }

  // string pictureFormat = 3;
  if (this->pictureformat().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pictureformat());
  }

  // string calcParam = 4;
  if (this->calcparam().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->calcparam());
  }

  // uint32 imageId = 1;
  if (this->imageid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imageid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImgRecognizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video.algo.gosun_ext.ImgRecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ImgRecognizeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImgRecognizeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video.algo.gosun_ext.ImgRecognizeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video.algo.gosun_ext.ImgRecognizeRequest)
    MergeFrom(*source);
  }
}

void ImgRecognizeRequest::MergeFrom(const ImgRecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video.algo.gosun_ext.ImgRecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.imagedata().size() > 0) {

    imagedata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imagedata_);
  }
  if (from.pictureformat().size() > 0) {

    pictureformat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pictureformat_);
  }
  if (from.calcparam().size() > 0) {

    calcparam_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.calcparam_);
  }
  if (from.imageid() != 0) {
    set_imageid(from.imageid());
  }
}

void ImgRecognizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video.algo.gosun_ext.ImgRecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImgRecognizeRequest::CopyFrom(const ImgRecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video.algo.gosun_ext.ImgRecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImgRecognizeRequest::IsInitialized() const {
  return true;
}

void ImgRecognizeRequest::Swap(ImgRecognizeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImgRecognizeRequest::InternalSwap(ImgRecognizeRequest* other) {
  imagedata_.Swap(&other->imagedata_);
  pictureformat_.Swap(&other->pictureformat_);
  calcparam_.Swap(&other->calcparam_);
  std::swap(imageid_, other->imageid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImgRecognizeRequest::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImgRecognizeRequest

// uint32 imageId = 1;
void ImgRecognizeRequest::clear_imageid() {
  imageid_ = 0u;
}
::google::protobuf::uint32 ImgRecognizeRequest::imageid() const {
  // @@protoc_insertion_point(field_get:video.algo.gosun_ext.ImgRecognizeRequest.imageId)
  return imageid_;
}
void ImgRecognizeRequest::set_imageid(::google::protobuf::uint32 value) {
  
  imageid_ = value;
  // @@protoc_insertion_point(field_set:video.algo.gosun_ext.ImgRecognizeRequest.imageId)
}

// bytes imageData = 2;
void ImgRecognizeRequest::clear_imagedata() {
  imagedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ImgRecognizeRequest::imagedata() const {
  // @@protoc_insertion_point(field_get:video.algo.gosun_ext.ImgRecognizeRequest.imageData)
  return imagedata_.GetNoArena();
}
void ImgRecognizeRequest::set_imagedata(const ::std::string& value) {
  
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.algo.gosun_ext.ImgRecognizeRequest.imageData)
}
#if LANG_CXX11
void ImgRecognizeRequest::set_imagedata(::std::string&& value) {
  
  imagedata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.algo.gosun_ext.ImgRecognizeRequest.imageData)
}
#endif
void ImgRecognizeRequest::set_imagedata(const char* value) {
  
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.algo.gosun_ext.ImgRecognizeRequest.imageData)
}
void ImgRecognizeRequest::set_imagedata(const void* value, size_t size) {
  
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.algo.gosun_ext.ImgRecognizeRequest.imageData)
}
::std::string* ImgRecognizeRequest::mutable_imagedata() {
  
  // @@protoc_insertion_point(field_mutable:video.algo.gosun_ext.ImgRecognizeRequest.imageData)
  return imagedata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImgRecognizeRequest::release_imagedata() {
  // @@protoc_insertion_point(field_release:video.algo.gosun_ext.ImgRecognizeRequest.imageData)
  
  return imagedata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImgRecognizeRequest::set_allocated_imagedata(::std::string* imagedata) {
  if (imagedata != NULL) {
    
  } else {
    
  }
  imagedata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagedata);
  // @@protoc_insertion_point(field_set_allocated:video.algo.gosun_ext.ImgRecognizeRequest.imageData)
}

// string pictureFormat = 3;
void ImgRecognizeRequest::clear_pictureformat() {
  pictureformat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ImgRecognizeRequest::pictureformat() const {
  // @@protoc_insertion_point(field_get:video.algo.gosun_ext.ImgRecognizeRequest.pictureFormat)
  return pictureformat_.GetNoArena();
}
void ImgRecognizeRequest::set_pictureformat(const ::std::string& value) {
  
  pictureformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.algo.gosun_ext.ImgRecognizeRequest.pictureFormat)
}
#if LANG_CXX11
void ImgRecognizeRequest::set_pictureformat(::std::string&& value) {
  
  pictureformat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.algo.gosun_ext.ImgRecognizeRequest.pictureFormat)
}
#endif
void ImgRecognizeRequest::set_pictureformat(const char* value) {
  
  pictureformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.algo.gosun_ext.ImgRecognizeRequest.pictureFormat)
}
void ImgRecognizeRequest::set_pictureformat(const char* value, size_t size) {
  
  pictureformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.algo.gosun_ext.ImgRecognizeRequest.pictureFormat)
}
::std::string* ImgRecognizeRequest::mutable_pictureformat() {
  
  // @@protoc_insertion_point(field_mutable:video.algo.gosun_ext.ImgRecognizeRequest.pictureFormat)
  return pictureformat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImgRecognizeRequest::release_pictureformat() {
  // @@protoc_insertion_point(field_release:video.algo.gosun_ext.ImgRecognizeRequest.pictureFormat)
  
  return pictureformat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImgRecognizeRequest::set_allocated_pictureformat(::std::string* pictureformat) {
  if (pictureformat != NULL) {
    
  } else {
    
  }
  pictureformat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pictureformat);
  // @@protoc_insertion_point(field_set_allocated:video.algo.gosun_ext.ImgRecognizeRequest.pictureFormat)
}

// string calcParam = 4;
void ImgRecognizeRequest::clear_calcparam() {
  calcparam_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ImgRecognizeRequest::calcparam() const {
  // @@protoc_insertion_point(field_get:video.algo.gosun_ext.ImgRecognizeRequest.calcParam)
  return calcparam_.GetNoArena();
}
void ImgRecognizeRequest::set_calcparam(const ::std::string& value) {
  
  calcparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.algo.gosun_ext.ImgRecognizeRequest.calcParam)
}
#if LANG_CXX11
void ImgRecognizeRequest::set_calcparam(::std::string&& value) {
  
  calcparam_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.algo.gosun_ext.ImgRecognizeRequest.calcParam)
}
#endif
void ImgRecognizeRequest::set_calcparam(const char* value) {
  
  calcparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.algo.gosun_ext.ImgRecognizeRequest.calcParam)
}
void ImgRecognizeRequest::set_calcparam(const char* value, size_t size) {
  
  calcparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.algo.gosun_ext.ImgRecognizeRequest.calcParam)
}
::std::string* ImgRecognizeRequest::mutable_calcparam() {
  
  // @@protoc_insertion_point(field_mutable:video.algo.gosun_ext.ImgRecognizeRequest.calcParam)
  return calcparam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImgRecognizeRequest::release_calcparam() {
  // @@protoc_insertion_point(field_release:video.algo.gosun_ext.ImgRecognizeRequest.calcParam)
  
  return calcparam_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImgRecognizeRequest::set_allocated_calcparam(::std::string* calcparam) {
  if (calcparam != NULL) {
    
  } else {
    
  }
  calcparam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), calcparam);
  // @@protoc_insertion_point(field_set_allocated:video.algo.gosun_ext.ImgRecognizeRequest.calcParam)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImgRecognizeReply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImgRecognizeReply::ImgRecognizeReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:video.algo.gosun_ext.ImgRecognizeReply)
}
ImgRecognizeReply::ImgRecognizeReply(const ImgRecognizeReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:video.algo.gosun_ext.ImgRecognizeReply)
}

void ImgRecognizeReply::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ImgRecognizeReply::~ImgRecognizeReply() {
  // @@protoc_insertion_point(destructor:video.algo.gosun_ext.ImgRecognizeReply)
  SharedDtor();
}

void ImgRecognizeReply::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImgRecognizeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImgRecognizeReply::descriptor() {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[1].descriptor;
}

const ImgRecognizeReply& ImgRecognizeReply::default_instance() {
  protobuf_service_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImgRecognizeReply* ImgRecognizeReply::New(::google::protobuf::Arena* arena) const {
  ImgRecognizeReply* n = new ImgRecognizeReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImgRecognizeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:video.algo.gosun_ext.ImgRecognizeReply)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ImgRecognizeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video.algo.gosun_ext.ImgRecognizeReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "video.algo.gosun_ext.ImgRecognizeReply.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video.algo.gosun_ext.ImgRecognizeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video.algo.gosun_ext.ImgRecognizeReply)
  return false;
#undef DO_
}

void ImgRecognizeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video.algo.gosun_ext.ImgRecognizeReply)
  // string data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "video.algo.gosun_ext.ImgRecognizeReply.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:video.algo.gosun_ext.ImgRecognizeReply)
}

::google::protobuf::uint8* ImgRecognizeReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:video.algo.gosun_ext.ImgRecognizeReply)
  // string data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "video.algo.gosun_ext.ImgRecognizeReply.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:video.algo.gosun_ext.ImgRecognizeReply)
  return target;
}

size_t ImgRecognizeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:video.algo.gosun_ext.ImgRecognizeReply)
  size_t total_size = 0;

  // string data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImgRecognizeReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video.algo.gosun_ext.ImgRecognizeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ImgRecognizeReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImgRecognizeReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video.algo.gosun_ext.ImgRecognizeReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video.algo.gosun_ext.ImgRecognizeReply)
    MergeFrom(*source);
  }
}

void ImgRecognizeReply::MergeFrom(const ImgRecognizeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video.algo.gosun_ext.ImgRecognizeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ImgRecognizeReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video.algo.gosun_ext.ImgRecognizeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImgRecognizeReply::CopyFrom(const ImgRecognizeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video.algo.gosun_ext.ImgRecognizeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImgRecognizeReply::IsInitialized() const {
  return true;
}

void ImgRecognizeReply::Swap(ImgRecognizeReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImgRecognizeReply::InternalSwap(ImgRecognizeReply* other) {
  data_.Swap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImgRecognizeReply::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImgRecognizeReply

// string data = 1;
void ImgRecognizeReply::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ImgRecognizeReply::data() const {
  // @@protoc_insertion_point(field_get:video.algo.gosun_ext.ImgRecognizeReply.data)
  return data_.GetNoArena();
}
void ImgRecognizeReply::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.algo.gosun_ext.ImgRecognizeReply.data)
}
#if LANG_CXX11
void ImgRecognizeReply::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.algo.gosun_ext.ImgRecognizeReply.data)
}
#endif
void ImgRecognizeReply::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.algo.gosun_ext.ImgRecognizeReply.data)
}
void ImgRecognizeReply::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.algo.gosun_ext.ImgRecognizeReply.data)
}
::std::string* ImgRecognizeReply::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:video.algo.gosun_ext.ImgRecognizeReply.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImgRecognizeReply::release_data() {
  // @@protoc_insertion_point(field_release:video.algo.gosun_ext.ImgRecognizeReply.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImgRecognizeReply::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:video.algo.gosun_ext.ImgRecognizeReply.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ImgProcService::~ImgProcService() {}

const ::google::protobuf::ServiceDescriptor* ImgProcService::descriptor() {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* ImgProcService::GetDescriptor() {
  return descriptor();
}

void ImgProcService::Recognize(::google::protobuf::RpcController* controller,
                         const ::video::algo::gosun_ext::ImgRecognizeRequest*,
                         ::video::algo::gosun_ext::ImgRecognizeReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Recognize() not implemented.");
  done->Run();
}

void ImgProcService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_service_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      Recognize(controller,
             ::google::protobuf::down_cast<const ::video::algo::gosun_ext::ImgRecognizeRequest*>(request),
             ::google::protobuf::down_cast< ::video::algo::gosun_ext::ImgRecognizeReply*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ImgProcService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::video::algo::gosun_ext::ImgRecognizeRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& ImgProcService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::video::algo::gosun_ext::ImgRecognizeReply::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ImgProcService_Stub::ImgProcService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ImgProcService_Stub::ImgProcService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ImgProcService_Stub::~ImgProcService_Stub() {
  if (owns_channel_) delete channel_;
}

void ImgProcService_Stub::Recognize(::google::protobuf::RpcController* controller,
                              const ::video::algo::gosun_ext::ImgRecognizeRequest* request,
                              ::video::algo::gosun_ext::ImgRecognizeReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace gosun_ext
}  // namespace algo
}  // namespace video

// @@protoc_insertion_point(global_scope)
