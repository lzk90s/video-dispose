// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto
#ifndef GRPC_service_2eproto__INCLUDED
#define GRPC_service_2eproto__INCLUDED

#include "service.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace algo {
namespace seemmo {

class VideoProc final {
 public:
  static constexpr char const* service_full_name() {
    return "algo.seemmo.VideoProc";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Trail(::grpc::ClientContext* context, const ::algo::seemmo::TrailRequest& request, ::algo::seemmo::TrailReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algo::seemmo::TrailReply>> AsyncTrail(::grpc::ClientContext* context, const ::algo::seemmo::TrailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algo::seemmo::TrailReply>>(AsyncTrailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algo::seemmo::TrailReply>> PrepareAsyncTrail(::grpc::ClientContext* context, const ::algo::seemmo::TrailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algo::seemmo::TrailReply>>(PrepareAsyncTrailRaw(context, request, cq));
    }
    virtual ::grpc::Status Recognize(::grpc::ClientContext* context, const ::algo::seemmo::RecognizeRequest& request, ::algo::seemmo::RecognizeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algo::seemmo::RecognizeReply>> AsyncRecognize(::grpc::ClientContext* context, const ::algo::seemmo::RecognizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algo::seemmo::RecognizeReply>>(AsyncRecognizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algo::seemmo::RecognizeReply>> PrepareAsyncRecognize(::grpc::ClientContext* context, const ::algo::seemmo::RecognizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algo::seemmo::RecognizeReply>>(PrepareAsyncRecognizeRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::algo::seemmo::TrailReply>* AsyncTrailRaw(::grpc::ClientContext* context, const ::algo::seemmo::TrailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::algo::seemmo::TrailReply>* PrepareAsyncTrailRaw(::grpc::ClientContext* context, const ::algo::seemmo::TrailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::algo::seemmo::RecognizeReply>* AsyncRecognizeRaw(::grpc::ClientContext* context, const ::algo::seemmo::RecognizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::algo::seemmo::RecognizeReply>* PrepareAsyncRecognizeRaw(::grpc::ClientContext* context, const ::algo::seemmo::RecognizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Trail(::grpc::ClientContext* context, const ::algo::seemmo::TrailRequest& request, ::algo::seemmo::TrailReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algo::seemmo::TrailReply>> AsyncTrail(::grpc::ClientContext* context, const ::algo::seemmo::TrailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algo::seemmo::TrailReply>>(AsyncTrailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algo::seemmo::TrailReply>> PrepareAsyncTrail(::grpc::ClientContext* context, const ::algo::seemmo::TrailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algo::seemmo::TrailReply>>(PrepareAsyncTrailRaw(context, request, cq));
    }
    ::grpc::Status Recognize(::grpc::ClientContext* context, const ::algo::seemmo::RecognizeRequest& request, ::algo::seemmo::RecognizeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algo::seemmo::RecognizeReply>> AsyncRecognize(::grpc::ClientContext* context, const ::algo::seemmo::RecognizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algo::seemmo::RecognizeReply>>(AsyncRecognizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algo::seemmo::RecognizeReply>> PrepareAsyncRecognize(::grpc::ClientContext* context, const ::algo::seemmo::RecognizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algo::seemmo::RecognizeReply>>(PrepareAsyncRecognizeRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::algo::seemmo::TrailReply>* AsyncTrailRaw(::grpc::ClientContext* context, const ::algo::seemmo::TrailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::algo::seemmo::TrailReply>* PrepareAsyncTrailRaw(::grpc::ClientContext* context, const ::algo::seemmo::TrailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::algo::seemmo::RecognizeReply>* AsyncRecognizeRaw(::grpc::ClientContext* context, const ::algo::seemmo::RecognizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::algo::seemmo::RecognizeReply>* PrepareAsyncRecognizeRaw(::grpc::ClientContext* context, const ::algo::seemmo::RecognizeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Trail_;
    const ::grpc::internal::RpcMethod rpcmethod_Recognize_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Trail(::grpc::ServerContext* context, const ::algo::seemmo::TrailRequest* request, ::algo::seemmo::TrailReply* response);
    virtual ::grpc::Status Recognize(::grpc::ServerContext* context, const ::algo::seemmo::RecognizeRequest* request, ::algo::seemmo::RecognizeReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Trail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Trail() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Trail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Trail(::grpc::ServerContext* context, const ::algo::seemmo::TrailRequest* request, ::algo::seemmo::TrailReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTrail(::grpc::ServerContext* context, ::algo::seemmo::TrailRequest* request, ::grpc::ServerAsyncResponseWriter< ::algo::seemmo::TrailReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Recognize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Recognize() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Recognize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Recognize(::grpc::ServerContext* context, const ::algo::seemmo::RecognizeRequest* request, ::algo::seemmo::RecognizeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecognize(::grpc::ServerContext* context, ::algo::seemmo::RecognizeRequest* request, ::grpc::ServerAsyncResponseWriter< ::algo::seemmo::RecognizeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Trail<WithAsyncMethod_Recognize<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Trail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Trail() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Trail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Trail(::grpc::ServerContext* context, const ::algo::seemmo::TrailRequest* request, ::algo::seemmo::TrailReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Recognize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Recognize() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Recognize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Recognize(::grpc::ServerContext* context, const ::algo::seemmo::RecognizeRequest* request, ::algo::seemmo::RecognizeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Trail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Trail() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Trail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Trail(::grpc::ServerContext* context, const ::algo::seemmo::TrailRequest* request, ::algo::seemmo::TrailReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTrail(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Recognize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Recognize() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Recognize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Recognize(::grpc::ServerContext* context, const ::algo::seemmo::RecognizeRequest* request, ::algo::seemmo::RecognizeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecognize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Trail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Trail() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::algo::seemmo::TrailRequest, ::algo::seemmo::TrailReply>(std::bind(&WithStreamedUnaryMethod_Trail<BaseClass>::StreamedTrail, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Trail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Trail(::grpc::ServerContext* context, const ::algo::seemmo::TrailRequest* request, ::algo::seemmo::TrailReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTrail(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::algo::seemmo::TrailRequest,::algo::seemmo::TrailReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Recognize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Recognize() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::algo::seemmo::RecognizeRequest, ::algo::seemmo::RecognizeReply>(std::bind(&WithStreamedUnaryMethod_Recognize<BaseClass>::StreamedRecognize, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Recognize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Recognize(::grpc::ServerContext* context, const ::algo::seemmo::RecognizeRequest* request, ::algo::seemmo::RecognizeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecognize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::algo::seemmo::RecognizeRequest,::algo::seemmo::RecognizeReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Trail<WithStreamedUnaryMethod_Recognize<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Trail<WithStreamedUnaryMethod_Recognize<Service > > StreamedService;
};

}  // namespace seemmo
}  // namespace algo


#endif  // GRPC_service_2eproto__INCLUDED
